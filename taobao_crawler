# -*- coding: utf-8 -*-
# __author__ = 'HaoquanLi'

import urllib2
import re

# input the keyword and the lower bound of price range (default 0)

def get_taobao_price(keyword, lowerBound = 0):
    #lowerBound: the lower bound of the prices of interest. Use this to filtered those fake ones
    keyword = keyword.replace(' ','+')
    url = 'http://s.taobao.com/search?isprepay=1&sort=price-asc&tab=all&q='+keyword+'&filter=reserve_price%5B'+str(lowerBound)+'%2C%5D'
    # note that the above link applies a filter of "wang wang zai xian". To remove this filter, use the link below:
    # http://s.taobao.com/search?isprepay=1&filter=reserve_price%5B'+str(lowerBound)+'%2C%5D&sort=price-asc&fs=1&tab=all&q='+keyword

    # start crawling....
    try:
        response = urllib2.urlopen(url)  #prices from low to high
        html = response.read()

        if re.match('.+.u62b1.u6b49.uff01.u6ca1.u6709.u627e.+', html, re.S) is not None:  # re.S means the dot can represent every thing including the new line char
            print ('item not found')
            return

        itemgroups = html.split('},{"comment_count"') # split the page source
        items_from_jpmj = [] # item descriptions from "Jin Pai Mai Jia" only
        prices_from_jpmj = [] # prices of the above items
        items_id_from_jpmj = [] # id of the above items
        for iteminfo in itemgroups:
            # start to filter out unwanted results
            # below are some example filters.
            filter1 = re.match('.+u90a6.u5b9d.+', iteminfo) # filter out "bang bao" which is a knock-off brand
            filter2 = re.match('.+u5c0f.u9c81.u73ed.+', iteminfo) # filter out "xiao lu ban" which is a knock-off brand
            filter3 = re.match('.+u4e50.u9ad8.u5f0f.+', iteminfo) # filter out "le gao shi" which is a indicator of knock-off brands
            filter4 = re.match('.+u4e50.u9ad8.u7c7b.+', iteminfo) # filter out "le gao lei" which is a indicator of knock-off brands
            filter5 = re.match('.+u517c.u5bb9.u4e50.u9ad8.+', iteminfo) # filter out "jian rong le gao" which is a indicator of knock-off brands
            filter6 = re.match('.+u914d.u4ef6.+', iteminfo) ## filter out "pei jian" which are components only

            if filter1 or filter2 or filter3 or filter4 or filter5 or filter6 is not None:
                continue

            tmpinfo = re.match('.+jpmj.php.+', iteminfo) # find "Jin Pai Mai Jia"
            if tmpinfo is not None:
                items_from_jpmj.append(iteminfo)
                prices_from_jpmj.extend(re.findall('"view_price":"(\d+.\d{2})"', iteminfo))
                items_id_from_jpmj.extend(re.findall('"nid":"(\d+)"', iteminfo))

        # parse the prices into floats
        # and generate shopping links
        shop_links = []
        for i in range(len(prices_from_jpmj)):
            try:
                prices_from_jpmj[i] = float(prices_from_jpmj[i])
                shop_links.append('http://item.taobao.com/item.htm?id='+items_id_from_jpmj[i])
            except:
                prices_from_jpmj[i]=-9999  #have to do this to make the list consistent. -9999 will be filtered out anyway
                shop_links[i].append('not found')

        #final check of prices
        result_prices = []
        result_links = []
        for i in range(len(prices_from_jpmj)):
            if lowerBound <= prices_from_jpmj[i]:
                result_prices.append(prices_from_jpmj[i])
                result_links.append(shop_links[i])


        if (len(result_prices)):
            return result_prices[0], result_links[0]  # this is the lowest price and link of interest
        else:
            print('no prices found in range')

    except:
        print('no item found')

# for example, if I want to search for a Lego toy set:
print (get_taobao_price('lego 10242', 1200))
